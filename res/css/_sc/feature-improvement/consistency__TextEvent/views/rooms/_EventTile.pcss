/*
Copyright 2024 Suguru Hirahara

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* Specify text color with color property instead of opacity.
   Note this mixin is applied to GELS as well. */
@define-mixin EventTile_line_color {
    /* Use :is to win against the specificity of
       mx_EventTile_content.mx_ViewSourceEvent for example */
    :is(.mx_EventTile_info, .mx_GenericEventListSummary) {
        /* Get rid of opacity values for coloring from CSS files as it is very
           confusing and makes it difficult to maintain consistency.
           See: https://github.com/SchildiChat/schildichat-desktop/issues/241 */
        .mx_EventTile_line * {
            opacity: unset;
        }

        /* Then specify the color */
        .mx_EventTile_line {
            color: $tertiary-content;

            /* Set the same color to the element directly below it */
            > * {
                color: $tertiary-content;
            }

            /* Revert the color value of call event */
            .mx_CallEvent_wrapper {
                color: initial;
            }
        }
    }
}

/* Specify font for consistency */
@define-mixin EventTile_line_font {
    :is(.mx_EventTile_info, .mx_GenericEventListSummary) {
        --font: var(--cpd-font-body-sm-regular); /* Replace with js when needed */

        .mx_EventTile_line {
            /* Set the same font to the element directly below it. This way,
               it is possible to avoid applying the font value to elements
               inside it, such as code element in mx_ViewSourceEvent. */
            > * {
                font: var(--font);
            }
        }
    }
}

/* Specify text color with color property instead of opacity for properties
   which start with mx_M */
@define-mixin EventTile_line_M {
    .mx_EventTile_line {
        [class^="mx_M"] {
            opacity: unset;
        }

        .mx_MNoticeBody {
            /* See #fdroid:f-droid.org/$jrVZxdvY2NqNYvXigQ_sTZNeOadpOuFGFsraHy8GR3Y for an example */
            .mx_EventTile_body.markdown-body {
                /* !important flag is required as it is used on the upstream */
                color: $tertiary-content !important;
            }
        }
    }
}
